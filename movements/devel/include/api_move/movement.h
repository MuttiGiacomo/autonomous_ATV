// Generated by gencpp from file api_move/movement.msg
// DO NOT EDIT!


#ifndef API_MOVE_MESSAGE_MOVEMENT_H
#define API_MOVE_MESSAGE_MOVEMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace api_move
{
template <class ContainerAllocator>
struct movement_
{
  typedef movement_<ContainerAllocator> Type;

  movement_()
    : speed_command(0)
    , angle_of_correction(0)
    , forward_reverse()  {
    }
  movement_(const ContainerAllocator& _alloc)
    : speed_command(0)
    , angle_of_correction(0)
    , forward_reverse(_alloc)  {
  (void)_alloc;
    }



   typedef uint16_t _speed_command_type;
  _speed_command_type speed_command;

   typedef int16_t _angle_of_correction_type;
  _angle_of_correction_type angle_of_correction;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _forward_reverse_type;
  _forward_reverse_type forward_reverse;





  typedef boost::shared_ptr< ::api_move::movement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::api_move::movement_<ContainerAllocator> const> ConstPtr;

}; // struct movement_

typedef ::api_move::movement_<std::allocator<void> > movement;

typedef boost::shared_ptr< ::api_move::movement > movementPtr;
typedef boost::shared_ptr< ::api_move::movement const> movementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::api_move::movement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::api_move::movement_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace api_move

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'api_move': ['/home/atv-remote/movements/src/api_move/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::api_move::movement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::api_move::movement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::api_move::movement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::api_move::movement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::api_move::movement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::api_move::movement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::api_move::movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c6fee59201861cdecc9b5d349f15d08";
  }

  static const char* value(const ::api_move::movement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c6fee59201861cdULL;
  static const uint64_t static_value2 = 0xecc9b5d349f15d08ULL;
};

template<class ContainerAllocator>
struct DataType< ::api_move::movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "api_move/movement";
  }

  static const char* value(const ::api_move::movement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::api_move::movement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 speed_command\n"
"int16 angle_of_correction\n"
"string forward_reverse\n"
;
  }

  static const char* value(const ::api_move::movement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::api_move::movement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_command);
      stream.next(m.angle_of_correction);
      stream.next(m.forward_reverse);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct movement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::api_move::movement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::api_move::movement_<ContainerAllocator>& v)
  {
    s << indent << "speed_command: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.speed_command);
    s << indent << "angle_of_correction: ";
    Printer<int16_t>::stream(s, indent + "  ", v.angle_of_correction);
    s << indent << "forward_reverse: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.forward_reverse);
  }
};

} // namespace message_operations
} // namespace ros

#endif // API_MOVE_MESSAGE_MOVEMENT_H
