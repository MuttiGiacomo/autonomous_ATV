<?xml version="1.0" encoding="utf-8"?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from quad.xacro                     | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="quad">
  <!--
 1. Create model with URDF: http://wiki.ros.org/urdf/Tutorials/Create%20your%20own%20urdf%20file
 2. Add controllable joints: http://wiki.ros.org/urdf/Tutorials/Building%20a%20Movable%20Robot%20Model%20with%20URDF
 3. Physical properties: http://wiki.ros.org/urdf/Tutorials/Adding%20Physical%20and%20Collision%20Properties%20to%20a%20URDF%20Model or http://gazebosim.org/tutorials/?tut=ros_urdf
 4. Use Macros: http://wiki.ros.org/urdf/Tutorials/Using%20Xacro%20to%20Clean%20Up%20a%20URDF%20File
 5. Link to Gazebo: http://wiki.ros.org/urdf/Tutorials/Using%20a%20URDF%20in%20Gazebo
-->
  <!-- Inspired from https://github.com/DJTobias/Cherry-Autonomous-Racecar/blob/master/urdf/car.urdf
     and https://github.com/mit-racecar/racecar-simulator/blob/master/racecar_description/urdf/racecar.xacro
-->
  <!-- X axis direction is forward, Y axis direction is left -->
  <!-- X axis direction is forward, Y axis direction is left -->
  <!-- Transmissions are motors attached to a certain joint. We thus need to instantiate transmissions at the corresponding joints -->
  <!-- A transmission consists of an actuator (commanded output) and a sensor (for feedback)
	     These interfaces are used as abstraction layers between controllers and the actual hardware.
	-->
  <!-- Possible hardware interfaces:
		EffortJointInterface		-  	similar to torque/acceleration control
		VelocityJointInterface		-	references given as velocity (linear/angular)
		PositionJointInterface		-	references given as position (linear/angular)
	-->
  <!-- Notice that the two transmission types above are identical - only the naming convention is different -->
  <!-- Transmissions are motors attached to a certain joint. We thus need to instantiate transmissions at the corresponding joints -->
  <!-- A transmission consists of an actuator (commanded output) and a sensor (for feedback)
	     These interfaces are used as abstraction layers between controllers and the actual hardware.
	-->
  <!-- Possible hardware interfaces:
		EffortJointInterface		-  	similar to torque/acceleration control
		VelocityJointInterface		-	references given as velocity (linear/angular)
		PositionJointInterface		-	references given as position (linear/angular)
	-->
  <!-- Notice that the two transmission types above are identical - only the naming convention is different -->
  <link name="baseplate"/>
  <link name="base_link">
    <visual>
      <material name="acrylic"/>
      <origin rpy="0 0 0" xyz="0 0 -0.1"/>
      <geometry>
        <mesh filename="package://atv_description/meshes/atv/base_link.stl"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 -0.1" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the box, so place the origin of this in the bottom of baseplate -->
      <geometry>
        <box size="1.0 0.55 0.4"/>
        <!-- 50x20x6.75 cm, X-axis is front of vehicle -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 -0.1" xyz="0 0 0"/>
      <mass value="50.0"/>
      <inertia ixx="1.92708333333" ixy="0" ixz="0" iyy="4.83333333333" iyz="0" izz="5.42708333333"/>
    </inertial>
  </link>
  <joint name="baseplate_to_base_link" type="fixed">
    <parent link="baseplate"/>
    <child link="base_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.35"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <!--<link name="front_mount">
		<visual>
			<material name="grey"/>
			<xacro:front_mount_geometry/>
		</visual>
		<collision>
			<xacro:front_mount_geometry/>
		</collision>
		<inertial>
			<xacro:front_mount_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="base_link" child="front_mount" offset="${front_to_rear_wheel_center/4} 0 -${base_link_to_wheel_center/2}"/>-->
  <!--<link name="rear_mount">
		<visual>
			<material name="grey"/>
			<xacro:rear_mount_geometry/>
		</visual>
		<collision>
			<xacro:rear_mount_geometry/>
		</collision>
		<inertial>
			<xacro:rear_mount_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="base_link" child="rear_mount" offset="-${front_to_rear_wheel_center/4} 0 -${base_link_to_wheel_center/2}"/>-->
  <link name="front_shaft">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.78" radius="0.018"/>
        <!-- confirm length between wheels -->
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.78" radius="0.018"/>
        <!-- confirm length between wheels -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.0050781" ixy="0" ixz="0" iyy="0.0050781" iyz="0" izz="1.62e-05"/>
    </inertial>
  </link>
  <joint name="base_link_to_front_shaft" type="fixed">
    <parent link="base_link"/>
    <child link="front_shaft"/>
    <origin rpy="0 0 0" xyz="0.58 0 -0.118"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <!--<xacro:dampener_joint parent="front_mount" child="front_shaft" offset="${front_to_rear_wheel_center/4} 0 -${baseplate_to_wheel_center/2}"/> I can not get the dampener joint to work properly. The car seems to be bouncing around, like the spring is too hard and dampening is too little. I already tried adjusting several parameters. -->
  <link name="rear_shaft">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.78" radius="0.018"/>
        <!-- confirm length between wheels -->
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.78" radius="0.018"/>
        <!-- confirm length between wheels -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.0050781" ixy="0" ixz="0" iyy="0.0050781" iyz="0" izz="1.62e-05"/>
    </inertial>
  </link>
  <joint name="base_link_to_rear_shaft" type="fixed">
    <parent link="base_link"/>
    <child link="rear_shaft"/>
    <origin rpy="0 0 0" xyz="-0.58 0 -0.118"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <!-- <xacro:dampener_joint parent="rear_mount" child="rear_shaft" offset="-${front_to_rear_wheel_center/4} 0 -${baseplate_to_wheel_center/2}"/> I can not get the dampener joint to work properly. The car seems to be bouncing around, like the spring is too hard and dampening is too little. I already tried adjusting several parameters. -->
  <link name="front_right_steer">
    <visual>
      <material name="white"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.015"/>
      </geometry>
    </visual>
    <!--<collision>
			<xacro:hinge_geometry/>
		</collision>-->
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.05"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
      <!-- small inertia -->
    </inertial>
  </link>
  <joint name="front_right_steer_joint" type="revolute">
    <!-- revolute is a joint with a range limited motion around its' axis -->
    <parent link="front_shaft"/>
    <child link="front_right_steer"/>
    <origin rpy="0 0 0" xyz="0 -0.39 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 0 1"/>
    <limit effort="10" lower="-0.349065850399" upper="0.349065850399" velocity="100"/>
    <!-- effeort is similar to torque/acceleration -->
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
  </joint>
  <transmission name="front_right_steer_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_right_steer_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="front_right_steer_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="front_left_steer">
    <visual>
      <material name="white"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.015"/>
      </geometry>
    </visual>
    <!--<collision>
			<xacro:hinge_geometry/>
		</collision>-->
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.05"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
      <!-- small inertia -->
    </inertial>
  </link>
  <joint name="front_left_steer_joint" type="revolute">
    <!-- revolute is a joint with a range limited motion around its' axis -->
    <parent link="front_shaft"/>
    <child link="front_left_steer"/>
    <origin rpy="0 0 0" xyz="0 0.39 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 0 1"/>
    <limit effort="10" lower="-0.349065850399" upper="0.349065850399" velocity="100"/>
    <!-- effeort is similar to torque/acceleration -->
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
  </joint>
  <transmission name="front_left_steer_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_left_steer_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="front_left_steer_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="front_right_wheel">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
      <!--<contact_coefficients mu="0" kp="1000.0" kd="1.0"/>-->
      <!-- mu=The friction coefficient, kp=Stiffness coefficient, kd=Dampening coefficient -->
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="5.0"/>
      <inertia ixx="0.120041666667" ixy="0" ixz="0" iyy="0.120041666667" iyz="0" izz="0.196"/>
    </inertial>
  </link>
  <joint name="front_right_wheel_joint" type="continuous">
    <!-- continuous is a joint of continous motion around its' axis -->
    <parent link="front_right_steer"/>
    <child link="front_right_wheel"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 1 0"/>
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
    <limit effort="10" velocity="100"/>
  </joint>
  <transmission name="front_right_wheel_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_right_wheel_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="front_right_wheel_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="front_left_wheel">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
      <!--<contact_coefficients mu="0" kp="1000.0" kd="1.0"/>-->
      <!-- mu=The friction coefficient, kp=Stiffness coefficient, kd=Dampening coefficient -->
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="5.0"/>
      <inertia ixx="0.120041666667" ixy="0" ixz="0" iyy="0.120041666667" iyz="0" izz="0.196"/>
    </inertial>
  </link>
  <joint name="front_left_wheel_joint" type="continuous">
    <!-- continuous is a joint of continous motion around its' axis -->
    <parent link="front_left_steer"/>
    <child link="front_left_wheel"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 1 0"/>
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
    <limit effort="10" velocity="100"/>
  </joint>
  <transmission name="front_left_wheel_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_left_wheel_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="front_left_wheel_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="rear_right_wheel">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
      <!--<contact_coefficients mu="0" kp="1000.0" kd="1.0"/>-->
      <!-- mu=The friction coefficient, kp=Stiffness coefficient, kd=Dampening coefficient -->
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="5.0"/>
      <inertia ixx="0.120041666667" ixy="0" ixz="0" iyy="0.120041666667" iyz="0" izz="0.196"/>
    </inertial>
  </link>
  <joint name="rear_right_wheel_joint" type="continuous">
    <!-- continuous is a joint of continous motion around its' axis -->
    <parent link="rear_shaft"/>
    <child link="rear_right_wheel"/>
    <origin rpy="0 0 0" xyz="0 -0.39 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 1 0"/>
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
    <limit effort="10" velocity="100"/>
  </joint>
  <transmission name="rear_right_wheel_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="rear_right_wheel_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="rear_right_wheel_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="rear_left_wheel">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
      <!--<contact_coefficients mu="0" kp="1000.0" kd="1.0"/>-->
      <!-- mu=The friction coefficient, kp=Stiffness coefficient, kd=Dampening coefficient -->
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="5.0"/>
      <inertia ixx="0.120041666667" ixy="0" ixz="0" iyy="0.120041666667" iyz="0" izz="0.196"/>
    </inertial>
  </link>
  <joint name="rear_left_wheel_joint" type="continuous">
    <!-- continuous is a joint of continous motion around its' axis -->
    <parent link="rear_shaft"/>
    <child link="rear_left_wheel"/>
    <origin rpy="0 0 0" xyz="0 0.39 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 1 0"/>
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
    <limit effort="10" velocity="100"/>
  </joint>
  <transmission name="rear_left_wheel_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="rear_left_wheel_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="rear_left_wheel_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="imu">
    <visual>
      <material name="grey"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <box size="0.05 0.05 0.03"/>
        <!-- 50x50x30 mm, Please confirm against 3D drawings -->
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <box size="0.05 0.05 0.03"/>
        <!-- 50x50x30 mm, Please confirm against 3D drawings -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="2.83333333333e-06" ixy="0" ixz="0" iyy="2.83333333333e-06" iyz="0" izz="4.16666666667e-06"/>
      <!-- 10 grams -->
    </inertial>
  </link>
  <joint name="baseplate_to_imu" type="fixed">
    <parent link="baseplate"/>
    <child link="imu"/>
    <origin rpy="0 0 0" xyz="0 0 0.015"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <!-- because origin is in the center, we want the IMU to stand on the baseplate -->
  <link name="zed_depth_camera_center">
    <visual>
      <origin rpy="0 -1.57079632679 0" xyz="0 0 -0.05"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <mesh filename="package://zed_wrapper/urdf/models/zed.stl"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 -1.57079632679 0" xyz="0 0 -0.05"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <mesh filename="package://zed_wrapper/urdf/models/zed.stl"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <mass value="0.2"/>
      <inertia ixx="0.00371" ixy="0.0" ixz="0.0" iyy="0.003128" iyz="0.0" izz="0.003128"/>
    </inertial>
  </link>
  <link name="zed_camera_center_optical_frame"/>
  <link name="zed_left_camera_frame"/>
  <link name="zed_left_camera_optical_frame"/>
  <link name="zed_right_camera_frame"/>
  <link name="zed_right_camera_optical_frame"/>
  <joint name="baseplate_to_zed_depth_camera_center" type="fixed">
    <parent link="baseplate"/>
    <child link="zed_depth_camera_center"/>
    <origin rpy="0 1.57079632679 0" xyz="0.8 0 0.53"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <joint name="zed_depth_camera_center_to_zed_camera_center_optical_frame" type="fixed">
    <parent link="zed_depth_camera_center"/>
    <child link="zed_camera_center_optical_frame"/>
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <joint name="zed_depth_camera_center_to_zed_left_camera_frame" type="fixed">
    <parent link="zed_depth_camera_center"/>
    <child link="zed_left_camera_frame"/>
    <origin rpy="0 0 0" xyz="0 0.06 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <joint name="zed_left_camera_frame_to_zed_left_camera_optical_frame" type="fixed">
    <parent link="zed_left_camera_frame"/>
    <child link="zed_left_camera_optical_frame"/>
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <joint name="zed_depth_camera_center_to_zed_right_camera_frame" type="fixed">
    <parent link="zed_depth_camera_center"/>
    <child link="zed_right_camera_frame"/>
    <origin rpy="0 0 0" xyz="0 -0.06 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <joint name="zed_right_camera_frame_to_zed_right_camera_optical_frame" type="fixed">
    <parent link="zed_right_camera_frame"/>
    <child link="zed_right_camera_optical_frame"/>
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <link name="lidar_front">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 -0.025"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <mesh filename="package://lms1xx/meshes/sick-lms1xx.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 -0.025"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <mesh filename="package://lms1xx/meshes/sick-lms1xx.dae"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <mass value="1.1"/>
      <inertia ixx="0.00371" ixy="0.0" ixz="0.0" iyy="0.003128" iyz="0.0" izz="0.003128"/>
    </inertial>
  </link>
  <joint name="baseplate_to_lidar_front" type="fixed">
    <parent link="baseplate"/>
    <child link="lidar_front"/>
    <origin rpy="0 0 0" xyz="0.80 0.0 0.45"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <!-- Sensors
	<link name="left_camera_mount">
		<visual>
			<material name="blue"/>
			<xacro:camera_mount_geometry/>
		</visual>
		<collision>
			<xacro:camera_mount_geometry/>
		</collision>
		<inertial>
			<xacro:camera_mount_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="baseplate" child="left_camera_mount" offset="${baseplate_length/2-baseplate_frontedge_to_camera} ${camera_disparity/2} ${baseplate_thickness}"/>

	<link name="left_camera">
		<visual>
			<material name="blue"/>
			<xacro:camera_geometry/>
		</visual>
		<collision>
			<xacro:camera_geometry/>
		</collision>
		<inertial>
			<xacro:camera_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="left_camera_mount" child="left_camera" offset="0 0 ${camera_mount_height+camera_height/2}"/>

	<link name="right_camera_mount">
		<visual>
			<material name="blue"/>
			<xacro:camera_mount_geometry/>
		</visual>
		<collision>
			<xacro:camera_mount_geometry/>
		</collision>
		<inertial>
			<xacro:camera_mount_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="baseplate" child="right_camera_mount" offset="${baseplate_length/2-baseplate_frontedge_to_camera} -${camera_disparity/2} ${baseplate_thickness}"/>

	<link name="right_camera">
		<visual>
			<material name="blue"/>
			<xacro:camera_geometry/>
		</visual>
		<collision>
			<xacro:camera_geometry/>
		</collision>
		<inertial>
			<xacro:camera_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="right_camera_mount" child="right_camera" offset="0 0 ${camera_mount_height+camera_height/2}"/>


	<link name="lidar">
		<visual>
			<material name="red"/>
			<xacro:lidar_geometry/>
		</visual>
		<collision>
			<xacro:lidar_geometry/>
		</collision>
		<inertial>
			<xacro:lidar_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="lidar_mount" child="lidar" offset="0 0 ${lidar_mount_height}"/>




-->
  <!-- include the Gazebo description of the JetsonCar -->
  <!-- see the guide: http://wiki.ros.org/urdf/Tutorials/Using%20a%20URDF%20in%20Gazebo -->
  <!-- inspired from https://github.com/mit-racecar/racecar-simulator/blob/master/racecar_description/urdf/racecar.gazebo and https://github.com/husky/husky_simulator/blob/indigo-devel/husky_gazebo/urdf/husky.gazebo.xacro -->
  <!-- Visual and physical properties -->
  <!-- See http://gazebosim.org/tutorials?tut=ros_urdf&cat=connect_ros -->
  <gazebo reference="base_link">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Red</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="imu">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Grey</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="front_mount">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Grey</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="rear_mount">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Grey</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="front_shaft">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="rear_shaft">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="front_right_wheel">
    <mu1 value="1.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="1.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <fdir1 value="1 0 0"/>
    <!-- direction of mu1 friction coefficient in the collision frame -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="front_left_wheel">
    <mu1 value="1.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="1.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <fdir1 value="1 0 0"/>
    <!-- direction of mu1 friction coefficient in the collision frame -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="rear_right_wheel">
    <mu1 value="1.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="1.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <fdir1 value="1 0 0"/>
    <!-- direction of mu1 friction coefficient in the collision frame -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="rear_left_wheel">
    <mu1 value="1.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="1.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <fdir1 value="1 0 0"/>
    <!-- direction of mu1 friction coefficient in the collision frame -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <!-- We need to link Gazebo and ROS and let Gazebo load all the previously defined ROS parameters. Therefore this Gazebo file should be included in the end of the main xacro file! -->
  <!-- Link Gazebo and ROS -->
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <robotNamespace>/quad</robotNamespace>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    </plugin>
  </gazebo>
  <!-- Plugins, eg. sensors -->
  <!-- depth camera -->
  <gazebo reference="zed_camera_center">
    <sensor name="zed_camera_center" type="depth">
      <visualize>true</visualize>
      <camera>
        <horizontal_fov>1.047</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <depth_camera>
	 		</depth_camera>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="camera_plugin">
        <baseline>0.2</baseline>
        <!-- Keep this zero, update_rate in the parent <sensor> tag
			 will control the frame rate. -->
        <updateRate>0.0</updateRate>
        <cameraName>camera_ir</cameraName>
        <imageTopicName>/camera/color/image_raw</imageTopicName>
        <cameraInfoTopicName>/camera/color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/camera/depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>/camera/depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>/camera/depth/points</pointCloudTopicName>
        <frameName>zed_camera_center_optical_frame</frameName>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
      </plugin>
    </sensor>
  </gazebo>
  <!-- lidar -->
  <gazebo reference="lidar">
    <sensor name="lidar" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>false</visualize>
      <update_rate>50</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-2.35619</min_angle>
            <max_angle>2.35619</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.1</min>
          <max>30</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.001</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_laser.so" name="gazebo_ros_laser">
        <topicName>scan</topicName>
        <frameName>lidar_front</frameName>
        <robotNamespace>/</robotNamespace>
      </plugin>
    </sensor>
  </gazebo>
  <material name="black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.423529411765 0.0392156862745 1.0"/>
  </material>
  <material name="brown">
    <color rgba="0.870588235294 0.811764705882 0.764705882353 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <material name="acrylic">
    <color rgba="1.0 1.0 1.0 0.4"/>
  </material>
</robot>

<?xml version="1.0" encoding="utf-8"?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from quad.xacro                     | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<robot name="quad">
  <!--
 1. Create model with URDF: http://wiki.ros.org/urdf/Tutorials/Create%20your%20own%20urdf%20file
 2. Add controllable joints: http://wiki.ros.org/urdf/Tutorials/Building%20a%20Movable%20Robot%20Model%20with%20URDF
 3. Physical properties: http://wiki.ros.org/urdf/Tutorials/Adding%20Physical%20and%20Collision%20Properties%20to%20a%20URDF%20Model or http://gazebosim.org/tutorials/?tut=ros_urdf
 4. Use Macros: http://wiki.ros.org/urdf/Tutorials/Using%20Xacro%20to%20Clean%20Up%20a%20URDF%20File
 5. Link to Gazebo: http://wiki.ros.org/urdf/Tutorials/Using%20a%20URDF%20in%20Gazebo
-->
  <!-- Inspired from https://github.com/DJTobias/Cherry-Autonomous-Racecar/blob/master/urdf/car.urdf
     and https://github.com/mit-racecar/racecar-simulator/blob/master/racecar_description/urdf/racecar.xacro
-->
  <!-- X axis direction is forward, Y axis direction is left -->
  <!-- X axis direction is forward, Y axis direction is left -->
  <!-- Transmissions are motors attached to a certain joint. We thus need to instantiate transmissions at the corresponding joints -->
  <!-- A transmission consists of an actuator (commanded output) and a sensor (for feedback)
	     These interfaces are used as abstraction layers between controllers and the actual hardware.
	-->
  <!-- Possible hardware interfaces:
		EffortJointInterface		-  	similar to torque/acceleration control
		VelocityJointInterface		-	references given as velocity (linear/angular)
		PositionJointInterface		-	references given as position (linear/angular)
	-->
  <!-- Notice that the two transmission types above are identical - only the naming convention is different -->
  <!-- Transmissions are motors attached to a certain joint. We thus need to instantiate transmissions at the corresponding joints -->
  <!-- A transmission consists of an actuator (commanded output) and a sensor (for feedback)
	     These interfaces are used as abstraction layers between controllers and the actual hardware.
	-->
  <!-- Possible hardware interfaces:
		EffortJointInterface		-  	similar to torque/acceleration control
		VelocityJointInterface		-	references given as velocity (linear/angular)
		PositionJointInterface		-	references given as position (linear/angular)
	-->
  <!-- Notice that the two transmission types above are identical - only the naming convention is different -->
  <link name="baseplate"/>
  <link name="base_link">
    <visual>
      <material name="acrylic"/>
      <origin rpy="0 0 0" xyz="0 0 -0.1"/>
      <geometry>
        <mesh filename="package://atv_description/meshes/atv/base_link.stl"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 -0.1" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the box, so place the origin of this in the bottom of baseplate -->
      <geometry>
        <box size="1.0 0.55 0.4"/>
        <!-- 50x20x6.75 cm, X-axis is front of vehicle -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 -0.1" xyz="0 0 0"/>
      <mass value="50.0"/>
      <inertia ixx="1.92708333333" ixy="0" ixz="0" iyy="4.83333333333" iyz="0" izz="5.42708333333"/>
    </inertial>
  </link>
  <joint name="baseplate_to_base_link" type="fixed">
    <parent link="baseplate"/>
    <child link="base_link"/>
    <origin rpy="0 0 0" xyz="0 0 0.35"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <!--<link name="front_mount">
		<visual>
			<material name="grey"/>
			<xacro:front_mount_geometry/>
		</visual>
		<collision>
			<xacro:front_mount_geometry/>
		</collision>
		<inertial>
			<xacro:front_mount_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="base_link" child="front_mount" offset="${front_to_rear_wheel_center/4} 0 -${base_link_to_wheel_center/2}"/>-->
  <!--<link name="rear_mount">
		<visual>
			<material name="grey"/>
			<xacro:rear_mount_geometry/>
		</visual>
		<collision>
			<xacro:rear_mount_geometry/>
		</collision>
		<inertial>
			<xacro:rear_mount_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="base_link" child="rear_mount" offset="-${front_to_rear_wheel_center/4} 0 -${base_link_to_wheel_center/2}"/>-->
  <link name="front_shaft">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.78" radius="0.018"/>
        <!-- confirm length between wheels -->
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.78" radius="0.018"/>
        <!-- confirm length between wheels -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.0050781" ixy="0" ixz="0" iyy="0.0050781" iyz="0" izz="1.62e-05"/>
    </inertial>
  </link>
  <joint name="base_link_to_front_shaft" type="fixed">
    <parent link="base_link"/>
    <child link="front_shaft"/>
    <origin rpy="0 0 0" xyz="0.58 0 -0.118"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <!--<xacro:dampener_joint parent="front_mount" child="front_shaft" offset="${front_to_rear_wheel_center/4} 0 -${baseplate_to_wheel_center/2}"/> I can not get the dampener joint to work properly. The car seems to be bouncing around, like the spring is too hard and dampening is too little. I already tried adjusting several parameters. -->
  <link name="rear_shaft">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.78" radius="0.018"/>
        <!-- confirm length between wheels -->
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.78" radius="0.018"/>
        <!-- confirm length between wheels -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="0.0050781" ixy="0" ixz="0" iyy="0.0050781" iyz="0" izz="1.62e-05"/>
    </inertial>
  </link>
  <joint name="base_link_to_rear_shaft" type="fixed">
    <parent link="base_link"/>
    <child link="rear_shaft"/>
    <origin rpy="0 0 0" xyz="-0.58 0 -0.118"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <!-- <xacro:dampener_joint parent="rear_mount" child="rear_shaft" offset="-${front_to_rear_wheel_center/4} 0 -${baseplate_to_wheel_center/2}"/> I can not get the dampener joint to work properly. The car seems to be bouncing around, like the spring is too hard and dampening is too little. I already tried adjusting several parameters. -->
  <link name="front_right_steer">
    <visual>
      <material name="white"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.015"/>
      </geometry>
    </visual>
    <!--<collision>
			<xacro:hinge_geometry/>
		</collision>-->
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.05"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
      <!-- small inertia -->
    </inertial>
  </link>
  <joint name="front_right_steer_joint" type="revolute">
    <!-- revolute is a joint with a range limited motion around its' axis -->
    <parent link="front_shaft"/>
    <child link="front_right_steer"/>
    <origin rpy="0 0 0" xyz="0 -0.39 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 0 1"/>
    <limit effort="10" lower="-0.349065850399" upper="0.349065850399" velocity="100"/>
    <!-- effeort is similar to torque/acceleration -->
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
  </joint>
  <transmission name="front_right_steer_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_right_steer_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="front_right_steer_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="front_left_steer">
    <visual>
      <material name="white"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <sphere radius="0.015"/>
      </geometry>
    </visual>
    <!--<collision>
			<xacro:hinge_geometry/>
		</collision>-->
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.05"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6"/>
      <!-- small inertia -->
    </inertial>
  </link>
  <joint name="front_left_steer_joint" type="revolute">
    <!-- revolute is a joint with a range limited motion around its' axis -->
    <parent link="front_shaft"/>
    <child link="front_left_steer"/>
    <origin rpy="0 0 0" xyz="0 0.39 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 0 1"/>
    <limit effort="10" lower="-0.349065850399" upper="0.349065850399" velocity="100"/>
    <!-- effeort is similar to torque/acceleration -->
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
  </joint>
  <transmission name="front_left_steer_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_left_steer_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="front_left_steer_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="front_right_wheel">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
      <!--<contact_coefficients mu="0" kp="1000.0" kd="1.0"/>-->
      <!-- mu=The friction coefficient, kp=Stiffness coefficient, kd=Dampening coefficient -->
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="5.0"/>
      <inertia ixx="0.120041666667" ixy="0" ixz="0" iyy="0.120041666667" iyz="0" izz="0.196"/>
    </inertial>
  </link>
  <joint name="front_right_wheel_joint" type="continuous">
    <!-- continuous is a joint of continous motion around its' axis -->
    <parent link="front_right_steer"/>
    <child link="front_right_wheel"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 1 0"/>
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
    <limit effort="10" velocity="100"/>
  </joint>
  <transmission name="front_right_wheel_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_right_wheel_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="front_right_wheel_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="front_left_wheel">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
      <!--<contact_coefficients mu="0" kp="1000.0" kd="1.0"/>-->
      <!-- mu=The friction coefficient, kp=Stiffness coefficient, kd=Dampening coefficient -->
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="5.0"/>
      <inertia ixx="0.120041666667" ixy="0" ixz="0" iyy="0.120041666667" iyz="0" izz="0.196"/>
    </inertial>
  </link>
  <joint name="front_left_wheel_joint" type="continuous">
    <!-- continuous is a joint of continous motion around its' axis -->
    <parent link="front_left_steer"/>
    <child link="front_left_wheel"/>
    <origin rpy="0 0 0" xyz="0 0 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 1 0"/>
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
    <limit effort="10" velocity="100"/>
  </joint>
  <transmission name="front_left_wheel_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="front_left_wheel_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="front_left_wheel_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="rear_right_wheel">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
      <!--<contact_coefficients mu="0" kp="1000.0" kd="1.0"/>-->
      <!-- mu=The friction coefficient, kp=Stiffness coefficient, kd=Dampening coefficient -->
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="5.0"/>
      <inertia ixx="0.120041666667" ixy="0" ixz="0" iyy="0.120041666667" iyz="0" izz="0.196"/>
    </inertial>
  </link>
  <joint name="rear_right_wheel_joint" type="continuous">
    <!-- continuous is a joint of continous motion around its' axis -->
    <parent link="rear_shaft"/>
    <child link="rear_right_wheel"/>
    <origin rpy="0 0 0" xyz="0 -0.39 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 1 0"/>
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
    <limit effort="10" velocity="100"/>
  </joint>
  <transmission name="rear_right_wheel_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="rear_right_wheel_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="rear_right_wheel_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="rear_left_wheel">
    <visual>
      <material name="black"/>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the cylinder -->
      <geometry>
        <cylinder length="0.23" radius="0.28"/>
      </geometry>
      <!--<contact_coefficients mu="0" kp="1000.0" kd="1.0"/>-->
      <!-- mu=The friction coefficient, kp=Stiffness coefficient, kd=Dampening coefficient -->
    </collision>
    <inertial>
      <origin rpy="1.570796327 0 0" xyz="0 0 0"/>
      <mass value="5.0"/>
      <inertia ixx="0.120041666667" ixy="0" ixz="0" iyy="0.120041666667" iyz="0" izz="0.196"/>
    </inertial>
  </link>
  <joint name="rear_left_wheel_joint" type="continuous">
    <!-- continuous is a joint of continous motion around its' axis -->
    <parent link="rear_shaft"/>
    <child link="rear_left_wheel"/>
    <origin rpy="0 0 0" xyz="0 0.39 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
    <axis xyz="0 1 0"/>
    <!-- friction - The physical static friction. For prismatic joints, the units are Newtons. For revolving joints, the units are Newton meters. -->
    <!-- damping - The physical damping value. For prismatic joints, the units are Newton seconds per meter. For revolving joints, Newton meter secons per radian. -->
    <!--<dynamics friction="0.0" damping="0.0"/>-->
    <limit effort="10" velocity="100"/>
  </joint>
  <transmission name="rear_left_wheel_transmission" type="SimpleTransmission">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="rear_left_wheel_joint">
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
    </joint>
    <actuator name="rear_left_wheel_motor">
      <!-- The motor is torque controlled -->
      <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>
  <link name="imu">
    <visual>
      <material name="grey"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <box size="0.05 0.05 0.03"/>
        <!-- 50x50x30 mm, Please confirm against 3D drawings -->
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <box size="0.05 0.05 0.03"/>
        <!-- 50x50x30 mm, Please confirm against 3D drawings -->
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <mass value="0.01"/>
      <inertia ixx="2.83333333333e-06" ixy="0" ixz="0" iyy="2.83333333333e-06" iyz="0" izz="4.16666666667e-06"/>
      <!-- 10 grams -->
    </inertial>
  </link>
  <joint name="baseplate_to_imu" type="fixed">
    <parent link="baseplate"/>
    <child link="imu"/>
    <origin rpy="0 0 0" xyz="0 0 0.015"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <!-- because origin is in the center, we want the IMU to stand on the baseplate -->
  <link name="zed_depth_camera_center">
    <visual>
      <origin rpy="0 -1.57079632679 0" xyz="0 0 -0.05"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <mesh filename="package://zed_wrapper/urdf/models/zed.stl"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 -1.57079632679 0" xyz="0 0 -0.05"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <mesh filename="package://zed_wrapper/urdf/models/zed.stl"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <mass value="0.2"/>
      <inertia ixx="0.00371" ixy="0.0" ixz="0.0" iyy="0.003128" iyz="0.0" izz="0.003128"/>
    </inertial>
  </link>
  <link name="zed_camera_center_optical_frame"/>
  <link name="zed_left_camera_frame"/>
  <link name="zed_left_camera_optical_frame"/>
  <link name="zed_right_camera_frame"/>
  <link name="zed_right_camera_optical_frame"/>
  <joint name="baseplate_to_zed_depth_camera_center" type="fixed">
    <parent link="baseplate"/>
    <child link="zed_depth_camera_center"/>
    <origin rpy="0 1.57079632679 0" xyz="0.8 0 0.53"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <joint name="zed_depth_camera_center_to_zed_camera_center_optical_frame" type="fixed">
    <parent link="zed_depth_camera_center"/>
    <child link="zed_camera_center_optical_frame"/>
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <joint name="zed_depth_camera_center_to_zed_left_camera_frame" type="fixed">
    <parent link="zed_depth_camera_center"/>
    <child link="zed_left_camera_frame"/>
    <origin rpy="0 0 0" xyz="0 0.06 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <joint name="zed_left_camera_frame_to_zed_left_camera_optical_frame" type="fixed">
    <parent link="zed_left_camera_frame"/>
    <child link="zed_left_camera_optical_frame"/>
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <joint name="zed_depth_camera_center_to_zed_right_camera_frame" type="fixed">
    <parent link="zed_depth_camera_center"/>
    <child link="zed_right_camera_frame"/>
    <origin rpy="0 0 0" xyz="0 -0.06 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <joint name="zed_right_camera_frame_to_zed_right_camera_optical_frame" type="fixed">
    <parent link="zed_right_camera_frame"/>
    <child link="zed_right_camera_optical_frame"/>
    <origin rpy="-1.57079632679 0.0 -1.57079632679" xyz="0 0 0"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <link name="lidar_front">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 -0.025"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <mesh filename="package://lms1xx/meshes/sick-lms1xx.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 -0.025"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <geometry>
        <mesh filename="package://lms1xx/meshes/sick-lms1xx.dae"/>
      </geometry>
    </collision>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!-- origin (0,0,0) is in the center of the box -->
      <mass value="1.1"/>
      <inertia ixx="0.00371" ixy="0.0" ixz="0.0" iyy="0.003128" iyz="0.0" izz="0.003128"/>
    </inertial>
  </link>
  <joint name="baseplate_to_lidar_front" type="fixed">
    <parent link="baseplate"/>
    <child link="lidar_front"/>
    <origin rpy="0 0 0" xyz="0.80 0.0 0.45"/>
    <!-- offset from parent to child, so with direction based in parent frame -->
  </joint>
  <!-- Sensors
	<link name="left_camera_mount">
		<visual>
			<material name="blue"/>
			<xacro:camera_mount_geometry/>
		</visual>
		<collision>
			<xacro:camera_mount_geometry/>
		</collision>
		<inertial>
			<xacro:camera_mount_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="baseplate" child="left_camera_mount" offset="${baseplate_length/2-baseplate_frontedge_to_camera} ${camera_disparity/2} ${baseplate_thickness}"/>

	<link name="left_camera">
		<visual>
			<material name="blue"/>
			<xacro:camera_geometry/>
		</visual>
		<collision>
			<xacro:camera_geometry/>
		</collision>
		<inertial>
			<xacro:camera_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="left_camera_mount" child="left_camera" offset="0 0 ${camera_mount_height+camera_height/2}"/>

	<link name="right_camera_mount">
		<visual>
			<material name="blue"/>
			<xacro:camera_mount_geometry/>
		</visual>
		<collision>
			<xacro:camera_mount_geometry/>
		</collision>
		<inertial>
			<xacro:camera_mount_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="baseplate" child="right_camera_mount" offset="${baseplate_length/2-baseplate_frontedge_to_camera} -${camera_disparity/2} ${baseplate_thickness}"/>

	<link name="right_camera">
		<visual>
			<material name="blue"/>
			<xacro:camera_geometry/>
		</visual>
		<collision>
			<xacro:camera_geometry/>
		</collision>
		<inertial>
			<xacro:camera_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="right_camera_mount" child="right_camera" offset="0 0 ${camera_mount_height+camera_height/2}"/>


	<link name="lidar">
		<visual>
			<material name="red"/>
			<xacro:lidar_geometry/>
		</visual>
		<collision>
			<xacro:lidar_geometry/>
		</collision>
		<inertial>
			<xacro:lidar_inertial/>
		</inertial>
	</link>
	<xacro:fixed_offset_joint parent="lidar_mount" child="lidar" offset="0 0 ${lidar_mount_height}"/>




-->
  <!-- include the Gazebo description of the JetsonCar -->
  <!-- see the guide: http://wiki.ros.org/urdf/Tutorials/Using%20a%20URDF%20in%20Gazebo -->
  <!-- inspired from https://github.com/mit-racecar/racecar-simulator/blob/master/racecar_description/urdf/racecar.gazebo and https://github.com/husky/husky_simulator/blob/indigo-devel/husky_gazebo/urdf/husky.gazebo.xacro -->
  <!-- Visual and physical properties -->
  <!-- See http://gazebosim.org/tutorials?tut=ros_urdf&cat=connect_ros -->
  <gazebo reference="base_link">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Red</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="imu">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Grey</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="front_mount">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Grey</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="rear_mount">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Grey</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="front_shaft">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="rear_shaft">
    <mu1 value="0.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="0.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="front_right_wheel">
    <mu1 value="1.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="1.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <fdir1 value="1 0 0"/>
    <!-- direction of mu1 friction coefficient in the collision frame -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="front_left_wheel">
    <mu1 value="1.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="1.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <fdir1 value="1 0 0"/>
    <!-- direction of mu1 friction coefficient in the collision frame -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="rear_right_wheel">
    <mu1 value="1.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="1.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <fdir1 value="1 0 0"/>
    <!-- direction of mu1 friction coefficient in the collision frame -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <gazebo reference="rear_left_wheel">
    <mu1 value="1.0"/>
    <!-- Columb friction coefficient in fdir1 direction -->
    <mu2 value="1.0"/>
    <!-- Columb friction in perpendicular direction to fdir1 -->
    <kp value="10000000.0"/>
    <!-- contact stiffness -->
    <kd value="1.0"/>
    <!-- contact damping -->
    <fdir1 value="1 0 0"/>
    <!-- direction of mu1 friction coefficient in the collision frame -->
    <material>Gazebo/Black</material>
    <!--<turnGravityOff>false</turnGravityOff>-->
  </gazebo>
  <!-- We need to link Gazebo and ROS and let Gazebo load all the previously defined ROS parameters. Therefore this Gazebo file should be included in the end of the main xacro file! -->
  <!-- Link Gazebo and ROS -->
  <gazebo>
    <plugin filename="libgazebo_ros_control.so" name="gazebo_ros_control">
      <robotNamespace>/quad</robotNamespace>
      <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    </plugin>
  </gazebo>
  <!-- Plugins, eg. sensors -->
  <!-- depth camera -->
  <gazebo reference="zed_camera_center">
    <sensor name="zed_camera_center" type="depth">
      <visualize>true</visualize>
      <camera>
        <horizontal_fov>1.047</horizontal_fov>
        <image>
          <width>640</width>
          <height>480</height>
          <format>R8G8B8</format>
        </image>
        <depth_camera>
	 		</depth_camera>
        <clip>
          <near>0.1</near>
          <far>100</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="camera_plugin">
        <baseline>0.2</baseline>
        <!-- Keep this zero, update_rate in the parent <sensor> tag
			 will control the frame rate. -->
        <updateRate>0.0</updateRate>
        <cameraName>camera_ir</cameraName>
        <imageTopicName>/camera/color/image_raw</imageTopicName>
        <cameraInfoTopicName>/camera/color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/camera/depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>/camera/depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>/camera/depth/points</pointCloudTopicName>
        <frameName>zed_camera_center_optical_frame</frameName>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortionK1>0</distortionK1>
        <distortionK2>0</distortionK2>
        <distortionK3>0</distortionK3>
        <distortionT1>0</distortionT1>
        <distortionT2>0</distortionT2>
        <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline>
        <robotNamespace>/quad</robotNamespace>
      </plugin>
    </sensor>
  </gazebo>
  <!-- lidar -->
  <gazebo reference="lidar">
    <sensor name="lidar" type="ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>50</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-2.35619</min_angle>
            <max_angle>2.35619</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.1</min>
          <max>30</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.001</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_laser.so" name="gazebo_ros_laser">
        <topicName>scan</topicName>
        <frameName>lidar_front</frameName>
        <robotNamespace>/quad</robotNamespace>
      </plugin>
    </sensor>
  </gazebo>
  <material name="black">
    <color rgba="0.0 0.0 0.0 1.0"/>
  </material>
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.423529411765 0.0392156862745 1.0"/>
  </material>
  <material name="brown">
    <color rgba="0.870588235294 0.811764705882 0.764705882353 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <material name="acrylic">
    <color rgba="1.0 1.0 1.0 0.4"/>
  </material>
</robot>

